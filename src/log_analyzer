#!/usr/bin/python

import sys, signal, optparse, time

from   socket         import inet_aton
from   dpkt.ip        import IP_PROTO_TCP, IP_PROTO_UDP

from   ldui.logreader import LogReader
from   ldui.common    import LogDateError, LogMissingError, print_protos, OUTCOMES, OC_VALS

# globals
log_reader     = None
proto_names    = { IP_PROTO_TCP : 'tcp', IP_PROTO_UDP : 'udp' }
commands       = ( 'log', 'ports', 'dest' )

def usage():
    query   = "query        - show all 'log' entries or [ports, dest] per binary"
    query_2 = "<query> help - explain raw format"
    txt   = "usage: %sprog [options] query\n\n%s\n%s" % ( '%', query, query_2 )

    return txt

def command_help(cmd):
    get_func = None
    funcs = { 'log' :  log_reader.get_all,
              'ports': log_reader.get_ports,
              'dest':  log_reader.get_dest }

    print funcs.get(cmd).__doc__
    sys.exit(0)

def print_log(raw):
    '''Print the entire log'''
    if not raw:
        print "%-5s %-10s %-6s %-6s %-16s %-8s %-24s %s" % ( 'id', 'user', 'proto', 'dport', 'dest', 'outcome', 'date', 'binary' )

    for log in log_reader.get_all():
        if raw:
            print repr(log)
        else:
            print "%-5s %-10s %-6s %-6s %-16s %-8s %-24s %s" % ( log['id'], log['user'], log['proto'], log['dport'],
                                                                 log['dest'], OUTCOMES.get(log['outcome']), log['date'], log['bin'] )

def print_ports(raw):
    '''Print the ports per binary'''
    protos = log_reader.get_ports()

    if raw:
        print repr(protos)
        return
    else:
        print "%5s %5s %5s %s"  % ( 'proto', 'port', 'count', 'binary' )

    print_protos(protos, proto_names, "", "%12s" % "")

def print_dest(raw):
    '''Print the destinations per binary'''

    dests = log_reader.get_dest()

    if raw:
        print repr(dests)
        return
    else:
        print "%-16s %5s %5s %5s %s"  % ( 'dest', 'proto', 'port', 'count', 'binary' )

    for dest in sorted(dests, key=lambda dest: inet_aton(dest)):
        print_protos(dests.get(dest), proto_names, "%-16s" % dest, "%28s" % "")

def sigint_handler(signal, frame):
    ''' Clean up on close
    '''
    sys.exit(0)

curr_date = time.localtime()
parser    = optparse.OptionParser(usage=usage())
parser.add_option('-y', '--year',
                  dest='year', default=curr_date.tm_year, type=int,
                  help='log year (yy, default=current year)')
parser.add_option('-m', '--month',
                  dest='month', default=curr_date.tm_mon, type=int,
                  help='log month (mm, default=current month)')
parser.add_option('-d', '--day',
                  dest='day', default=curr_date.tm_mday, type=int,
                  help='log day (dd, default=today)')
parser.add_option('-e', '--exclude',
                  dest='exclude', default=[], action='append',
                  help='exclude log lines with a binary containing the given text (can be used multiple times)')
parser.add_option('-o', '--outcome',
                  dest='outcome', default=[], action='append',
                  help='only show log lines for the given outcome (BLOCKED, ALLOWED or NO_APP) (can be used multiple times)')
parser.add_option('-r', '--raw',
                  dest='raw', default=False, action='store_true',
                  help='Output raw data')
parser.add_option('-b', '--base',
                  dest='base', default='.',
                  help='base install directory')

options = ""
args    = ""

if __name__ == '__main__':
    (options, args) = parser.parse_args()
    signal.signal(signal.SIGINT, sigint_handler)

    try:
        log_reader = LogReader("%s/log" % options.base, (str(options.year), str(options.month), str(options.day)), exclude=options.exclude, outcomes=options.outcome)
    except LogDateError as e:
        sys.stderr.write("%s\n" % e.msg)
        sys.exit(1)
    except LogMissingError as e:
        sys.stderr.write("%s\n" % e.msg)
        sys.exit(2)

    if len(args) != 0 and args[0] not in commands:
        sys.stderr.write("query must be log, ports or dest\n")
        sys.exit(3)
    elif len(args) == 0:
        args.append('log')
    elif len(args) > 1 and args[1] == 'help':
        command_help(args[0])
    elif len(options.outcome) > 0:
        for oc in options.outcome:
            if oc not in OC_VALS.keys():
                sys.stderr.write("--outcome: invalid value: %s\n" % oc)
                sys.exit(4)

    # run command given as argument or show all logs per default
    globals()['print_%s' % args[0]](options.raw)
