#!/usr/bin/python

import sys, signal, time, optparse, asyncore, subprocess

from nfqueue import NF_DROP, NF_ACCEPT
from socket  import inet_ntoa
from dpkt    import ip, tcp, udp

from lockdown  import conninfo
from daemonize import Daemonize

from lockdown.connassert import ApplicationAssertions
from lockdown.common     import read_json, check_unknown, pack_conn
from lockdown.connlog    import ConnectionLogger, ViolationLogger
from lockdown.conntables import add_new_hook, rem_new_hook, NFQueueReader

from lockdown.test import perf_test

# constants
BLOCKED = 0
ALLOWED = 1
NO_APP  = 2

# globals
hook_state     = True
app_assertions = None
conn_logger    = None

def toggle_hook():
    ''' toggle nfqueue hook in iptables
    '''
    global hook_state

    code = 0
    if hook_state:
        code = add_new_hook()
    else:
        code = rem_new_hook()

    if code == 0:
        hook_state = not hook_state

    return code

def callback(ts, payload):
    ''' process new connections
    '''
    data = payload.get_data()

    # parse the transport layer
    packet  = ip.IP(data)
    segment = packet.data

    # what we do w/ unknown protocols
    if packet.p not in ( ip.IP_PROTO_TCP, ip.IP_PROTO_UDP ):
        if conf.get('default', 0) > 0:
            payload.set_verdict(NF_ACCEPT)
        else:
            payload.set_verdict(NF_DROP)

    # extract needed values
    ( proto, sip, sport, dip, dport ) = ( packet.p, inet_ntoa(packet.src), segment.sport, inet_ntoa(packet.dst), segment.dport ) 

    # find the process trying to make the connection
    ( pid, app, uid ) = proc = conninfo.get_conn_process(proto, sip, sport, dip, dport)

    # handle requests that start a listener
    if app is None or app == '':
        ( pid2, app2, uid2 ) = proc2 = conninfo.get_list_process(proto, sip, sport)
        ( pid, app, uid )    = check_unknown(pid, app, uid, pid2, app2, uid2 )
        del proc2

    # determine if the connection is allowed or not
    if app == 'UNKOWN':
        outcome = NO_APP
    elif app_assertions.check_app(uid, proto, app, dport, dip):
        outcome = ALLOWED
    else:
        outcome = BLOCKED

    # handle the packet
    if outcome in ( BLOCKED, NO_APP ) and not conf.get('log_only', 0) > 0:
        payload.set_verdict(NF_DROP)
    else:
        payload.set_verdict(NF_ACCEPT)

    if __debug__:
        print "%d, %d, %d, %d, %s, %s" % ( uid, proto, dport, outcome, dip, repr(app))
    if conf.get('verbose', 0) > 0:
        packed_conn = pack_conn(uid, proto, dport, outcome, packet.dst, app)
        conn_logger.stdin.write(packed_conn)
	conn_logger.stdin.flush()

    # explicitly cleanup objects
    del payload
    del proc

def test_output(results):
    ''' format and print test results
    '''
    for result in results:
        print "%-22s avg: %-15s min: %-15s max: %-15s" % ( result.url, result.avg, result.min, result.max )

def sigint_handler(signal, frame):
    ''' remove iptables entry and cleanup before shutdown
    '''
    rem_new_hook() # force this
    if app_assertions is not None:
        app_assertions.cleanup()
    if conn_logger is not None:
        conn_logger.terminate()

    sys.exit(0)

parser = optparse.OptionParser()
parser.add_option("-d", "--debug",
                  dest="debug", default=5, type=int,
                  help="set output level")
parser.add_option("-f", "--foreground",
                  dest="foreground", default=False,
                  action="store_true", help="run in foreground")
parser.add_option("-b", "--base",
                  dest="base", default=".",
                  help="base install directory")
parser.add_option("-t", "--test",
                  dest="test", default=False,
                  action="store_true", help="run performance tests")
parser.add_option("-D", "--test_cases",
                  dest="cases", default="conf/test/test_hosts.json",
                  help="test cases configuration, used with --test")

options = ""
args    = ""

# daemonize
class Lockdown(Daemonize):

    def run_daemon(self):
        global conf, app_assertions, conn_logger

        conf             = read_json("%s/conf/main.conf" % options.base)
        conf['verbose']  = options.debug
        app_assertions   = ApplicationAssertions("%s/conf" % options.base)
        reader           = NFQueueReader(0, callback)
        # start the log process
        conn_logger      = subprocess.Popen([ "python", "%s/bin/logger" % options.base,
                                              "-b", options.base ], stdin=subprocess.PIPE,
                                            env={ 'PYTHONPATH' : "%s/lib" % options.base })

        toggle_hook()
        asyncore.loop()

if __name__ == '__main__':
    (options, args) = parser.parse_args()
    signal.signal(signal.SIGINT, sigint_handler)
    signal.signal(signal.SIGTERM, sigint_handler)

    lockdown = Lockdown()

    if __debug__:
        lockdown.run_daemon()
    elif options.foreground:
        lockdown.run_daemon()
    elif options.test:
        results = perf_test.run_tests("%s/%s" % ( options.base, options.cases ))
        test_output(results)
    else:
        lockdown.start_daemon()
